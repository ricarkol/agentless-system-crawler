import os
import itertools
import shutil

class CombinationNotSupported(Exception):
	pass

# installation
not_installed_opts = ["no-sshd", "incomplete-sshd"]

installed_opts = ["package", "compiled7.1-default", "compiled7.1-in-opt", "compiled5.0-default", "compiled5.0-in-opt"]

# startup
sshd_startup_opts = ["sshd", "sshd-from-supervisord", "sshd-from-bash"]
other_startup_opts = ["sleep", "sleep-from-supervisord", "sleep-from-bash",
                      "nc-server", "nc-server-from-supervisord", "nc-server-from-bash",
                      "wrong-path-sshd", "wrong-path-sshd-from-supervisord", "wrong-path-sshd-from-bash"]

# XXX supervisord conf in different places

cmd_or_entrypoint_opts = ["entrypoint", "cmd"]

# port mapping
port_mapping_opts = ["port-mapped", "no-port-mapped", "other-port-mapped"]

# base image
base_image_opts = ["ubuntu-15.10", "ubuntu-14.04", "ubuntu-precise", "ubuntu-lucid",
                   "centos-6", "centos-7",
                   "opensuse-tumbleweed", "opensuse-13.2"]

# 10 images per GB
# one base_image at a time is: 7*12*2*3*1=505. That would make it 50GB
# all would be 505*8=4032

# print a dockerfile based on those choices
# This dockerfile has the following segments:
# <FROM-SEGMENT>
# <INSTALLATION-SEGMENT>
# <CONFIGURATION-SEGMENT>
# <PORT-MAPPING-SEGMENT>
# <ENTRYPOINT-CMD-SEGMENT>

def get_from_segment(installed, startup, cmd_or_entrypoint, port_mapping, base_image):
	return "FROM %s\nMAINTAINER Cloudsight (autogenerated by create-images.py)\n" % base_image.replace("-", ":")

sshd_supervisord_config_file = """
[supervisord]
nodaemon=true

[program:sshd]
command=/usr/sbin/sshd -D
"""

wrong_path_sshd_supervisord_config_file = """
[supervisord]
nodaemon=true

[program:sshd]
command=/sshd -D
"""


sleep_supervisord_config_file = """
[supervisord]
nodaemon=true

[program:sleep]
command=/bin/sleep 2222
"""

nc_server_supervisord_ubuntu_config_file = """
[supervisord]
nodaemon=true

[program:nc]
command=/bin/nc -l -k -p 22
"""

nc_server_supervisord_centos_config_file = """
[supervisord]
nodaemon=true

[program:nc]
command=/bin/nc -l -k 22
"""


sshd_bash = """#!/bin/bash
exec /usr/sbin/sshd -D
"""

wrong_path_sshd_bash = """#!/bin/bash
exec /sshd -D
"""

sleep_bash = """#!/bin/bash
exec /bin/sleep 2222
"""

nc_server_ubuntu_bash = """#!/bin/bash
exec /bin/nc -l -k -p 22
"""

nc_server_centos_bash = """#!/bin/bash
exec /bin/nc -l -k 22
"""

incomplete_ssd_ubuntu_installation_segment = """
RUN mkdir -p /var/run/sshd
RUN mkdir -p /etc/ssh/
RUN touch /etc/ssh/sshd_config
RUN mkdir -p /etc/pam.d/
RUN touch /etc/pam.d/sshd
"""

compiled_sshd7_1_default_installation_segment = """
RUN wget ftp://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-7.1p1.tar.gz
RUN tar xzvf openssh-7.1p1.tar.gz 
WORKDIR openssh-7.1p1
RUN adduser sshd || useradd sshd
RUN sh ./configure
RUN make
RUN make install
"""

compiled_sshd7_1_in_opt_installation_segment = """
RUN wget ftp://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-7.1p1.tar.gz
RUN tar xzvf openssh-7.1p1.tar.gz 
WORKDIR openssh-7.1p1
RUN adduser sshd || useradd sshd
RUN sh ./configure --prefix /opt
RUN make
RUN make install
"""

compiled_sshd5_0_default_installation_segment = """
RUN wget ftp://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-5.0p1.tar.gz
RUN tar xzvf openssh-5.0p1.tar.gz 
WORKDIR openssh-5.0p1
RUN adduser sshd || useradd sshd
RUN sh ./configure
RUN make
RUN make install
"""

compiled_sshd5_0_in_opt_installation_segment = """
RUN wget ftp://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-5.0p1.tar.gz
RUN tar xzvf openssh-5.0p1.tar.gz 
WORKDIR openssh-5.0p1
RUN adduser sshd || useradd sshd
RUN sh ./configure --prefix /opt
RUN make
RUN make install
"""


def get_installation_segment(installed, startup, cmd_or_entrypoint, port_mapping, base_image):
	segment = ""
	if "ubuntu" in base_image:
		if installed == "package":
			segment += "RUN apt-get update && apt-get install -y openssh-server\n"
		elif installed == "compiled7.1-default":
			segment += "RUN apt-get update && apt-get install -y gcc wget zlibc zlib1g-dev libssl-dev openssl make"
			segment += compiled_sshd7_1_default_installation_segment
		elif installed == "compiled7.1-in-opt":
			segment += "RUN apt-get update && apt-get install -y gcc wget zlibc zlib1g-dev libssl-dev openssl make"
			segment += compiled_sshd7_1_in_opt_installation_segment
		elif installed == "compiled5.0-default":
			segment += "RUN apt-get update && apt-get install -y gcc wget zlibc zlib1g-dev libssl-dev openssl make"
			segment += compiled_sshd5_0_default_installation_segment
		elif installed == "compiled5.0-in-opt":
			segment += "RUN apt-get update && apt-get install -y gcc wget zlibc zlib1g-dev libssl-dev openssl make"
			segment += compiled_sshd5_0_in_opt_installation_segment
		elif installed == "incomplete-sshd":
			segment += "RUN apt-get update && apt-get install -y gcc wget zlibc zlib1g-dev libssl-dev openssl make"
			segment += incomplete_ssd_ubuntu_installation_segment
		elif installed == "no-sshd":
			segment += ""
		else:
			raise CombinationNotsupported()
		if "supervisor" in startup:
			segment += "RUN apt-get update && apt-get install -y supervisor\n"
		if "nc" in startup:
			segment += "RUN apt-get update && apt-get install -y netcat\n"
	elif "centos" in base_image:
		if installed == "package":
			segment += "RUN yum update -y && yum install -y openssh-server\n"
		elif installed == "compiled7.1-default":
			segment += "RUN yum update -y && yum install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += compiled_sshd7_1_default_installation_segment
		elif installed == "compiled7.1-in-opt":
			segment += "RUN yum update -y && yum install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += compiled_sshd7_1_in_opt_installation_segment
		elif installed == "compiled5.0-default":
			segment += "RUN yum update -y && yum install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += compiled_sshd5_0_default_installation_segment
		elif installed == "compiled5.0-in-opt":
			segment += "RUN yum update -y && yum install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += compiled_sshd5_0_in_opt_installation_segment
		elif installed == "incomplete-sshd":
			segment += incomplete_ssd_ubuntu_installation_segment
		elif installed == "no-sshd":
			segment += ""
		else:
			raise CombinationNotsupported()
		if "supervisor" in startup:
			segment += "RUN yum update -y && yum install -y python-setuptools\n"
			segment += "RUN easy_install pip\n"
			segment += "RUN pip install supervisor\n"
			segment += "RUN pip freeze | grep meld3\n"
			segment += "RUN pip install meld3==1.0.0\n"
		if "nc" in startup:
			segment += "RUN yum update -y && yum install -y nc\n"
			segment += "RUN ln /usr/bin/nc /bin/nc || true\n"
	elif "opensuse" in base_image:
		if installed == "package":
			#segment += "RUN zypper update -y && zypper install -y openSSH\n"
			segment += "RUN zypper install -y openSSH\n"
		elif installed == "compiled7.1-default":
			segment += "RUN zypper install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += compiled_sshd7_1_default_installation_segment
		elif installed == "compiled7.1-in-opt":
			segment += "RUN zypper install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += compiled_sshd7_1_in_opt_installation_segment
		elif installed == "compiled5.0-default":
			segment += "RUN zypper install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += compiled_sshd5_0_default_installation_segment
		elif installed == "compiled5.0-in-opt":
			segment += "RUN zypper install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += compiled_sshd5_0_in_opt_installation_segment
		elif installed == "incomplete-sshd":
			segment += "RUN zypper install -y wget zlib zlib-devel libssh2-devel openssl make tar gcc"
			segment += incomplete_ssd_ubuntu_installation_segment
		elif installed == "no-sshd":
			segment += ""
		else:
			raise CombinationNotsupported()
		if "supervisor" in startup:
			if base_image == "opensuse-13.2":
				segment += "RUN zypper --non-interactive addrepo http://download.opensuse.org/repositories/devel:languages:python/openSUSE_13.2/devel:languages:python.repo\n"
			elif base_image == "opensuse-tumbleweed":
				segment += "RUN zypper --non-interactive addrepo http://download.opensuse.org/repositories/devel:languages:python/openSUSE_Tumbleweed/devel:languages:python.repo\n"
			else:
				raise CombinationNotsupported()
			segment += "RUN zypper --non-interactive --gpg-auto-import-keys refresh\n"
			segment += "RUN zypper --non-interactive install supervisor\n"
		if "nc" in startup:
			segment += "RUN zypper --non-interactive install netcat-openbsd\n"
			segment += "RUN ln /usr/bin/nc /bin/nc\n"
	else:
		raise CombinationNotsupported()
	return segment


package_ubuntu_configuration_segment = """
RUN mkdir /var/run/sshd
RUN echo 'root:screencast' | chpasswd
RUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

ENV NOTVISIBLE "in users profile"
RUN echo "export VISIBLE=now" >> /etc/profile
"""

# centos netcat: yum install netcat

def get_configuration_segment(installed, startup, cmd_or_entrypoint, port_mapping, base_image):
	if installed == "package" and "ubuntu" in base_image:
		return package_ubuntu_configuration_segment
	else:
		return ""


def get_port_mapping_segment(installed, startup, cmd_or_entrypoint, port_mapping, base_image):
	if port_mapping == "port-mapped":
		return "EXPOSE 22\n"
	elif port_mapping == "no-port-mapped":
		return ""
	elif port_mapping == "other-port-mapped":
		return "EXPOSE 23\n"
	else:
		raise CombinationNotsupported()


def get_entrypoint_cmd_segment(installed, startup, entrypoint_or_cmd, port_mapping, base_image):
	# SSHD SERVER
	if startup == "sshd":
		if installed == "compiled7.1-default" or installed == "compiled5.0-default":
			if entrypoint_or_cmd == "entrypoint":
				return 'ENTRYPOINT ["/usr/local/sbin/sshd"]\nCMD ["-D"]\n'
			elif entrypoint_or_cmd == "cmd":
				return 'CMD ["/usr/local/sbin/sshd", "-D"]\n'
			else:
				raise CombinationNotsupported()
		elif installed == "compiled7.1-in-opt" or installed == "compiled5.0-in-opt":
			if entrypoint_or_cmd == "entrypoint":
				return 'ENTRYPOINT ["/opt/sbin/sshd"]\nCMD ["-D"]\n'
			elif entrypoint_or_cmd == "cmd":
				return 'CMD ["/opt/sbin/sshd", "-D"]\n'
			else:
				raise CombinationNotsupported()
		else: #installed in ["package", "no-sshd", "incomplete-sshd"]
			if entrypoint_or_cmd == "entrypoint":
				return 'ENTRYPOINT ["/usr/sbin/sshd"]\nCMD ["-D"]\n'
			elif entrypoint_or_cmd == "cmd":
				return 'CMD ["/usr/sbin/sshd", "-D"]\n'
			else:
				raise CombinationNotsupported()
	if startup == "wrong-path-sshd":
		if entrypoint_or_cmd == "entrypoint":
			return 'ENTRYPOINT ["/sshd"]\nCMD ["-D"]\n'
		elif entrypoint_or_cmd == "cmd":
			return 'CMD ["/sshd", "-D"]\n'
		else:
			raise CombinationNotsupported()
	elif startup == "sshd-from-supervisord":
		if installed == "compiled7.1-default" or installed == "compiled5.0-default":
			with open("supervisord.conf", 'w') as f:
				f.write(sshd_supervisord_config_file.replace("/usr/sbin/sshd", "/usr/local/sbin/sshd"))
		elif installed == "compiled7.1-in-opt" or installed == "compiled5.0-in-opt":
			with open("supervisord.conf", 'w') as f:
				f.write(sshd_supervisord_config_file.replace("/usr/sbin/sshd", "/opt/sbin/sshd"))
		else: #installed in ["package", "no-sshd", "incomplete-sshd"]
			with open("supervisord.conf", 'w') as f:
				f.write(sshd_supervisord_config_file)
	elif startup == "wrong-path-sshd-from-supervisord":
		if installed == "compiled7.1-default" or installed == "compiled5.0-default":
			with open("supervisord.conf", 'w') as f:
				f.write(wrong_path_sshd_supervisord_config_file.replace("/usr/sbin/sshd", "/usr/local/sbin/sshd"))
		elif installed == "compiled7.1-in-opt" or installed == "compiled5.0-in-opt":
			with open("supervisord.conf", 'w') as f:
				f.write(wrong_path_sshd_supervisord_config_file.replace("/usr/sbin/sshd", "/opt/sbin/sshd"))
		else: #installed in ["package", "no-sshd", "incomplete-sshd"]
			with open("supervisord.conf", 'w') as f:
				f.write(wrong_path_sshd_supervisord_config_file)
	elif startup == "sshd-from-bash":
		if installed == "compiled7.1-default" or installed == "compiled5.0-default":
			with open("start.sh", 'w') as f:
				f.write(sshd_bash.replace("/usr/sbin/sshd", "/usr/local/sbin/sshd"))
		elif installed == "compiled7.1-in-opt" or installed == "compiled5.0-in-opt":
			with open("start.sh", 'w') as f:
				f.write(sshd_bash.replace("/usr/sbin/sshd", "/opt/sbin/sshd"))
		else: #installed in ["package", "no-sshd", "incomplete-sshd"]
			with open("start.sh", 'w') as f:
				f.write(sshd_bash)
	elif startup == "wrong-path-sshd-from-bash":
		if installed == "compiled7.1-default" or installed == "compiled5.0-default":
			with open("start.sh", 'w') as f:
				f.write(wrong_path_sshd_bash.replace("/usr/sbin/sshd", "/usr/local/sbin/sshd"))
		elif installed == "compiled7.1-in-opt" or installed == "compiled5.0-in-opt":
			with open("start.sh", 'w') as f:
				f.write(wrong_path_sshd_bash.replace("/usr/sbin/sshd", "/opt/sbin/sshd"))
		else: #installed in ["package", "no-sshd", "incomplete-sshd"]
			with open("start.sh", 'w') as f:
				f.write(wrong_path_sshd_bash)
	# SLEEP 
	elif startup == "sleep":
		if entrypoint_or_cmd == "entrypoint":
			return 'ENTRYPOINT ["sleep"]\nCMD ["2222"]\n'
		elif entrypoint_or_cmd == "cmd":
			return 'CMD ["sleep", "2222"]\n'
		else:
			raise CombinationNotsupported()
	elif startup == "sleep-from-supervisord":
		with open("supervisord.conf", 'w') as f:
			f.write(sleep_supervisord_config_file)
	elif startup == "sleep-from-bash":
		with open("start.sh", 'w') as f:
			f.write(sleep_bash)
	# NETCAT SERVER
	elif startup == "nc-server":
		if "ubuntu" in base_image:
			flags = '"-l", "-k", "-p", "22"'
		else: # "centos" in base_image:
			flags = '"-l", "-k", "22"'
		if entrypoint_or_cmd == "entrypoint":
			return 'ENTRYPOINT ["/bin/nc"]\nCMD [%s]\n' % flags
		elif entrypoint_or_cmd == "cmd":
			return 'CMD ["/bin/nc", %s]\n' % flags
		else:
			raise CombinationNotsupported()
	elif startup == "nc-server-from-supervisord":
		with open("supervisord.conf", 'w') as f:
			if "ubuntu" in base_image:
				f.write(nc_server_supervisord_ubuntu_config_file)
			else:
				f.write(nc_server_supervisord_centos_config_file)
	elif startup == "nc-server-from-bash":
		with open("start.sh", 'w') as f:
			if "ubuntu" in base_image:
				f.write(nc_server_ubuntu_bash)
			else:
				f.write(nc_server_centos_bash)
	else:
		raise CombinationNotsupported()

	# COMMON TO ALL SUPERVISOR STARTUPS
	if "supervisor" in startup:
		if entrypoint_or_cmd == "entrypoint":
			return ('COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n'
				'ENTRYPOINT ["/usr/bin/supervisord"]\n'
				'CMD ["-c", "/etc/supervisor/conf.d/supervisord.conf"]\n')
		elif entrypoint_or_cmd == "cmd":
			return ('COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n'
				'CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]\n')
		else:
			raise CombinationNotsupported()
	# COMMON TO ALL BASH STARTUPS
	if "bash" in startup:
		if entrypoint_or_cmd == "entrypoint":
			return ('COPY start.sh /usr/bin/start.sh\n'
				'RUN chmod a+x /usr/bin/start.sh\n'
				'ENTRYPOINT ["/usr/bin/start.sh"]\n'
				'CMD [""]\n')
		elif entrypoint_or_cmd == "cmd":
			return ('COPY start.sh /usr/bin/start.sh\n'
				'RUN chmod a+x /usr/bin/start.sh\n'
				'CMD ["/usr/bin/start.sh"]\n')
		else:
			raise CombinationNotsupported()



startup_opts = sshd_startup_opts + other_startup_opts

try: os.remove("all_combinations")
except:	pass

all_combs_f = open("all_combinations", 'w')
all_combs_f.write("declare -a arr=(\n")

#print len(installed_opts + not_installed_opts), len(sshd_startup_opts + other_startup_opts), len(cmd_or_entrypoint_opts), len(port_mapping_opts), len(base_image_opts)
#total=len(installed_opts + not_installed_opts) * len(sshd_startup_opts + other_startup_opts) * len(cmd_or_entrypoint_opts) * len(port_mapping_opts) + len(base_image_opts)
#print total
#exit(1)

for t in itertools.product(installed_opts + not_installed_opts,
                           sshd_startup_opts + other_startup_opts,
                           cmd_or_entrypoint_opts,
                           port_mapping_opts,
                           base_image_opts):
	imagename = str(t).replace(', ', '.').replace('(', '').replace(')', '').replace('\'', '')

	try:
		dockerfile  = get_from_segment(*t)
		dockerfile += get_installation_segment(*t)
		dockerfile += get_configuration_segment(*t)
		dockerfile += get_port_mapping_segment(*t)
		dockerfile += get_entrypoint_cmd_segment(*t)
	except:
		print t
		# combination not supported
		raise

	# imagename is supported
	print imagename
	all_combs_f.write("%s\n" % imagename)

	# cleanup
	try: os.mkdir("images/%s" % imagename)
	except:	pass
	try: os.remove("images/%s/Dockerfile" % imagename)
	except: pass
	try: os.remove("images/%s/supervisord.conf" % imagename)
	except:	pass
	try: os.remove("images/%s/start.sh" % imagename)
	except:	pass
	
	try: shutil.move("./supervisord.conf", "images/%s/supervisord.conf" % imagename)
	except: pass
	try: shutil.move("./start.sh", "images/%s/start.sh" % imagename)
	except: pass
	with open("images/%s/Dockerfile" % imagename, 'w') as f:
		f.write(dockerfile)

all_combs_f.write(")\n")
all_combs_f.close()
