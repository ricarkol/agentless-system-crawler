from __future__ import print_function
import sys
import os
import json
from collections import defaultdict, namedtuple
import logging
import logging.handlers

mydict = defaultdict(list)
#-------------------------------------------------------------------------------
# ubuntu security ids are in the format: usn-number1-number2
# for our processing, we treat number1 and sec_major, and number2 as sec_minorusn
# redhat security notices follow the format of number1:number2 (number1 is year in four degit format)
# we use sec_major and sec_minor numbers to order security notices 
#----------------------------------------------------------------------------------------------------

Fix = namedtuple('Fix', 'sec_major sec_minor pkg_ver_rel id')
sec_notice_map = {}
vulnerabilities_by_version = {}

def process_usn_info(security_notices, logger):

    for sec_notice in security_notices:
        try:
            sec_id = sec_notice['id']
        except KeyError, e:
            logger.warn('found old format security notice: {}'.format(sec_notice))
            continue

        if sec_id in sec_notice_map: # already loaded
            continue 

        sec_notice_map[sec_id] = sec_notice

        ID1, ID2 = 0, 0
        if sec_id.startswith('usn')  or sec_id.startswith('DSA'):
            NameSplit = sec_id.split('-')
            if len(NameSplit) == 3:
                ID1 = int(NameSplit[1])
                ID2 = int(NameSplit[2])
            else:
                logger.warn('non-confirming ubuntu or debian security noice id: {}. Skipping...'.format(sec_id))
                continue
        elif sec_id.startswith('RHSA'):
            NameSplit = sec_id.split('-')
            ID1 = int("".join(NameSplit[1].split(':')))
        else:
            logger.error('Unknown security id format: {}, skipping'.format(sec_id))
            continue

        fixes = sec_notice.get("fixes", None)  # fixes is a list
        if not fixes:
            logger.info('no fixes found for security notice:{}'.format(sec_id))
            continue

        for entry in fixes:   # entry is a dictionary  
            os_name = entry["os"]["name"]  # name of us rhel, ubuntu
            os_ver = entry["os"]["version"]  # version of OS
            vulnerabilities_by_version[os_ver] = vulnerabilities_by_version.get(os_ver, 0) + 1
            os_arch = entry["os"]["architecture"]  
            os_distro = entry["os"]["distribution"]  
            pkg_info = entry["packages"] # package information, is a list 
            for entry2 in pkg_info: # entry2 is a dictionary
                pkg_name = entry2["name"] # package name  
                pkg_ver = entry2["version"] # package version
                pkg_release = entry2.get("release","")
                TupleKey = (os_name, os_ver, os_arch, pkg_name)
                if pkg_release:
                    mydict[TupleKey].append(Fix(ID1,ID2,'{}-{}'.format(pkg_ver, pkg_release), sec_notice['id']))  
                else:
                    mydict[TupleKey].append(Fix(ID1,ID2,pkg_ver, sec_notice['id']))  

    for tupleI in mydict:
        itemLen = len(mydict[tupleI])
        if itemLen > 1:
            mydict[tupleI].sort(reverse=True)
    
    #for tupleI in mydict:  
    #    logger.info(' key={}, pkg_ver_rel={}, sec_id={}'.format(tupleI, mydict[tupleI][0].pkg_ver_rel, mydict[tupleI][0].sec_major ))
    
    return mydict

if __name__ == '__main__':

    format = '%(asctime)s %(levelname)s %(lineno)s %(funcName)s: %(message)s'
    logging.basicConfig(format=format, level=logging.INFO)
    
    logger = logging.getLogger(__name__)
    
    fh = logging.handlers.RotatingFileHandler("usndb.log", maxBytes=2<<27, backupCount=4)
    formatter = logging.Formatter(format)
    fh.setFormatter(formatter)
    logger.addHandler(fh)
    logger.propagate = False
    def get_all_usn(repo_dir, logger):

        results = []
        if os.path.exists(repo_dir):
            for root, dirs, files in os.walk(repo_dir):
                for name in files:
                    try:
                        results.append(json.load(open(os.path.join(root, name))))
                    except Exception, e:
                        logger.error (e)
                        raise e
        return results

    try:
        usn_info_list=get_all_usn('data', logger)
        distro_pkg_usn_map = process_usn_info(usn_info_list, logger)
        for tupleI in distro_pkg_usn_map:  
            print('(os_name, os_ver, os_arch, pkg_name)={}, fixes={}'.format(tupleI, distro_pkg_usn_map[tupleI][0].sec_major ))
    except Exception, e:
         print (e)
         raise

