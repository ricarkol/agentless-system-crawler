#!/usr/bin/env python

'''
CloudSight Timemachine Application
'''

import os
import sys
import argparse
import signal

_my_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
_base_dir = os.path.abspath(os.path.join(_my_dir, '..')) 
sys.path.append(_base_dir)


import logging

logger = logging.getLogger("cloudsight.timemachine")
logger.setLevel(logging.DEBUG)
 
# create console handler
handler = logging.StreamHandler()

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s: %(message)s')

# add formatter to handler
handler.setFormatter(formatter)

# add handler to logger
logger.addHandler(handler)

import endpoint.rest_endpoint

def sigterm_handler(signum=None, frame=None):
    print 'Received SIGTERM signal. Goodbye!'
    sys.exit(0)

signal.signal(signal.SIGTERM, sigterm_handler)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='CloudSight Timemachine Application.')
        
    parser.add_argument('--port', type=int, required=True, metavar='<timemachine port>',
        help='The port to which the search service will listen')

    parser.add_argument('--elastic-search-cluster', type=str, required=True, metavar='<elasticsearch cluster>',
        help='Comma-separated list of the form "<host_1:port_1>, <host_2:port_2>, ..., <host_n:port_n>" indicating the target Elasticsearch cluster')

    parser.add_argument('--search-service', type=str, required=True, metavar='<search service>',
        help='Search service <host_1:port_1>')
    
    parser.add_argument('-v', '--verbose', action='store_true', help='Turns on debug-level logging')
        
    args = parser.parse_args()
    if args.verbose:
        handler.setLevel(logging.DEBUG)
    else:
        handler.setLevel(logging.INFO)
    
    endpoint.rest_endpoint.main(args)
